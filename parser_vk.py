import time
import re
import pandas as pd
import vk_api
from auth_vk import VK_TOKEN
from collections import defaultdict

# ‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –ª—é–±—ã–µ –∏–∑ –Ω–∏—Ö –¥–µ–ª–∞—é—Ç –ø–æ—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º (–æ –∑–¥–∞–Ω–∏—è—Ö/–Ω–∞—Å–ª–µ–¥–∏–∏)
keywords = [
    r"–ø–∞–º—è—Ç–Ω–∏–∫(–∞|–∏|–æ–≤|—É|–æ–º|–µ)?\s*(–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä(—ã|–µ|–æ–π|—É)?)?",
    r"–æ–±—ä–µ–∫—Ç(–∞|—ã|–æ–≤)?\s+–∫—É–ª—å—Ç—É—Ä–Ω(–æ–≥–æ|–æ–π)?\s+(–Ω–∞—Å–ª–µ–¥–∏—è|—Ü–µ–Ω–Ω–æ—Å—Ç–∏)?",
    r"–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫(–æ–µ|–∏–π|–∞—è|–æ–≥–æ|–æ–º—É|–∏–º|–∏—Ö|–∏–µ)?\s+–∑–¥–∞–Ω(–∏–µ|–∏—è|–∏–π|–∏—é|–∏–µ–º|–∏)?",
    r"–¥–æ–º(–∞|–æ–≤)?\s+(—Å—Ç–∞—Ä(—ã–π|–æ–≥–æ|—ã–µ)|–¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω(—ã–π|–æ–≥–æ|—ã–µ))",
    r"–∑–¥–∞–Ω–∏–µ.*(–ø–∞–º—è—Ç–Ω–∏–∫|–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫|–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω)",
    r"–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω(—ã–π|–∞—è|–æ–µ|—ã–µ|–æ–≥–æ)?\s+–æ–±—ä–µ–∫—Ç(—ã|–æ–≤)?",
    r"—Ü–µ–Ω–Ω(—ã–π|–æ–µ|–∞—è|—ã–µ|—ã—Ö)?\s+–≥—Ä–∞–¥–æ—Ñ–æ—Ä–º–∏—Ä—É—é—â(–∏–π|–∏–µ)?\s+–æ–±—ä–µ–∫—Ç(—ã|–æ–≤)?"
]

# üîé –§–∏–ª—å—Ç—Ä –Ω–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é
def matches_criteria(text):
    if not text:
        return False
    text_lower = text.lower()
    if "–∫—É—Ä—Å–∫" in text_lower or "–∫—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" in text_lower:
        return False
    return any(re.search(pattern, text_lower) for pattern in keywords)

# üßæ –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
custom_names = {
    "id14099614": "–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ö–Ω–æ—Ä",
    "ondryushka": "–ê–Ω–¥—Ä–µ–π –ö–æ—á–µ—Ç–∫–æ–≤",
    "public168139760": "–ì–ò–û–û–ö–ù –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
}

# üì° VK API
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()

# üì• –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
usernames = [
    'tomsawyerfest',
    'dgsamara',
    'irafishman',
    'voopiik_samara',
    'samaralastdream',
    'public168139760',
    'a_hinshtein',
    'fedorischev63',
    'ondryushka',
    'id14099614',
]

# üìä –°—Ç–æ–ª–±—Ü—ã
columns = [
    "–ö–∞–Ω–∞–ª", "ID", "–î–∞—Ç–∞", "–¢–µ–∫—Å—Ç", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "–û—Ç–≤–µ—Ç—ã", "–§–æ—Ä–≤–∞—Ä–¥—ã", "–õ–∞–π–∫–∏"
]

# üîç –ü–æ–ª—É—á–µ–Ω–∏–µ ID
def get_user_id(username):
    try:
        res = vk.utils.resolveScreenName(screen_name=username)
        if res and "object_id" in res:
            return res["object_id"], res["type"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ID @{username}: {e}")
    return None, None

# üì• –°–±–æ—Ä –ø–æ—Å—Ç–æ–≤
def get_filtered_posts(username, max_posts=1000):
    uid, obj_type = get_user_id(username)
    if not uid:
        return []

    owner_id = -uid if obj_type == "group" else uid
    offset = 0
    batch_size = 100
    posts = []

    while offset < max_posts:
        try:
            response = vk.wall.get(owner_id=owner_id, count=batch_size, offset=offset)
            items = response.get("items", [])
            if not items:
                break

            for post in items:
                text = post.get("text", "")
                if matches_criteria(text):
                    display_name = custom_names.get(username, username)
                    likes_count = post.get("likes", {}).get("count", 0)

                    post_data = {
                        "–ö–∞–Ω–∞–ª": display_name,
                        "ID": post.get("id"),
                        "–î–∞—Ç–∞": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(post["date"])),
                        "–¢–µ–∫—Å—Ç": text.replace("\n", " ").strip(),
                        "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": post.get("views", {}).get("count", 0),
                        "–û—Ç–≤–µ—Ç—ã": post.get("comments", {}).get("count", 0),
                        "–§–æ—Ä–≤–∞—Ä–¥—ã": post.get("reposts", {}).get("count", 0),
                        "–õ–∞–π–∫–∏": likes_count
                    }
                    posts.append(post_data)

            offset += batch_size
            time.sleep(0.35)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ VK API

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –æ—Ç @{username}: {e}")
            break

    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ @{username}")
    return posts

# üöÄ –ó–∞–ø—É—Å–∫
all_data = []
for username in usernames:
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ @{username}")
    posts = get_filtered_posts(username)
    all_data.extend(posts)

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º
df = pd.DataFrame(all_data, columns=columns)
df.to_csv("vk_filtered_posts_broad.csv", index=False, encoding='utf-8-sig')
print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª 'vk_filtered_posts_broad.csv'")
