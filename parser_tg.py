import csv
import asyncio
import re
from collections import defaultdict
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
import my_config  # –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å api_id, api_hash –∏ tnumber

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = my_config.api_id
api_hash = my_config.api_hash
tnumber = my_config.tnumber

channels = [
    "drugoigorod", "truekpru63", "chp_samara", "samartop", "samara_smi",
    "news63ru", "samara_vip", "samara", "samaray", "samara5", "matveevkomment", "enter_samara",
    "Hinshtein", "Fedorischev63", "save_as_samara"
]

output_file = "tg_filtered_posts_broad.csv"

# üìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
keywords = [
    r"–ø–∞–º—è—Ç–Ω–∏–∫(–∏|–∞|–æ–≤)?( –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä(—ã|–µ|–æ–π)?)?",
    r"–æ–±—ä–µ–∫—Ç(—ã)? –∫—É–ª—å—Ç—É—Ä–Ω(–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è|–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏)?",
    r"–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫(–æ–µ|–∏–π|–∞—è|–æ–≥–æ|–æ–º—É|–∏–º|–∏—Ö|–∏–µ)? –∑–¥–∞–Ω–∏(–µ|—è|–∏–π|–µ–º)?",
    r"–¥–æ–º(–∞|–æ–≤)? (—Å—Ç–∞—Ä(—ã–π|–æ–≥–æ|—ã–µ)|–¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω(—ã–π|–æ–≥–æ|—ã–µ))",
    r"–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω(—ã–π|–∞—è|–æ–µ|—ã–µ)? –æ–±—ä–µ–∫—Ç(—ã)?",
    r"—Ü–µ–Ω–Ω(–æ–µ|—ã–π|–∞—è|—ã–µ)? –≥—Ä–∞–¥–æ—Ñ–æ—Ä–º–∏—Ä—É—é—â(–∏–π|–∏–µ)? –æ–±—ä–µ–∫—Ç(—ã)?"
]

# ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
def matches_criteria(text):
    if not text:
        return False
    text_lower = text.lower()
    if "–∫—É—Ä—Å–∫" in text_lower or "–∫—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" in text_lower:
        return False
    return any(re.search(pattern, text_lower) for pattern in keywords)

async def fetch_posts():
    async with TelegramClient(tnumber, api_id, api_hash) as client:
        all_data = []
        all_emojis = set()

        for channel_username in channels:
            try:
                print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ @{channel_username}")
                entity = await client.get_entity(channel_username)
                offset_id = 0
                limit = 100

                while True:
                    history = await client(GetHistoryRequest(
                        peer=entity,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        limit=limit,
                        max_id=0,
                        min_id=0,
                        hash=0
                    ))

                    messages = history.messages
                    if not messages:
                        break

                    for msg in messages:
                        text = msg.message
                        if matches_criteria(text):
                            reaction_counts = defaultdict(int)
                            if msg.reactions and msg.reactions.results:
                                for reaction in msg.reactions.results:
                                    emoji = getattr(reaction.reaction, "emoticon", "üîí")
                                    reaction_counts[emoji] += reaction.count
                                    all_emojis.add(emoji)

                            data = {
                                "–ö–∞–Ω–∞–ª": channel_username,
                                "ID": msg.id,
                                "–î–∞—Ç–∞": msg.date.strftime("%Y-%m-%d %H:%M"),
                                "–¢–µ–∫—Å—Ç": text.replace("\n", " ").strip() if text else "",
                                "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": msg.views or 0,
                                "–û—Ç–≤–µ—Ç—ã": msg.replies.replies if msg.replies else 0,
                                "–§–æ—Ä–≤–∞—Ä–¥—ã": msg.forwards or 0,
                                "–†–µ–∞–∫—Ü–∏–∏": reaction_counts
                            }
                            all_data.append(data)

                    offset_id = messages[-1].id

                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ @{channel_username}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ @{channel_username}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        emoji_columns = sorted(all_emojis)
        fieldnames = ["–ö–∞–Ω–∞–ª", "ID", "–î–∞—Ç–∞", "–¢–µ–∫—Å—Ç", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", "–û—Ç–≤–µ—Ç—ã", "–§–æ—Ä–≤–∞—Ä–¥—ã"] + emoji_columns

        with open(output_file, mode="w", encoding="utf-8", newline="") as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()

            for item in all_data:
                row = {
                    "–ö–∞–Ω–∞–ª": item["–ö–∞–Ω–∞–ª"],
                    "ID": item["ID"],
                    "–î–∞—Ç–∞": item["–î–∞—Ç–∞"],
                    "–¢–µ–∫—Å—Ç": item["–¢–µ–∫—Å—Ç"],
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": item["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
                    "–û—Ç–≤–µ—Ç—ã": item["–û—Ç–≤–µ—Ç—ã"],
                    "–§–æ—Ä–≤–∞—Ä–¥—ã": item["–§–æ—Ä–≤–∞—Ä–¥—ã"],
                }
                for emoji in emoji_columns:
                    row[emoji] = item["–†–µ–∞–∫—Ü–∏–∏"].get(emoji, 0)
                writer.writerow(row)

        print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")

if __name__ == "__main__":
    asyncio.run(fetch_posts())
